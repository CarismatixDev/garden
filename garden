#!/usr/bin/env python3
import argparse
import json
import os
import subprocess
from datetime import date

data_file = os.path.join(os.path.dirname(__file__), "data.json")

def load_data():
    with open(data_file, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(data_file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
        f.write("\n")

def holocene_today():
    today = date.today()
    return f"{today.year + 10000:05d}-{today.month:02d}-{today.day:02d}"

def next_diid(data):
    max_diid = max((entry.get("DIID", -1) for entry in data.values()), default=-1)
    return max_diid + 1

def prompt_new_entry():
    data = load_data()
    title = input("TITLE: ").strip()
    type_input = input("TYPE (comma separated): ").strip()
    tags_input = input("TAGS (comma separated): ").strip()
    qote_input = input("QOTE (use '|' to separate multiple lines): ").strip()
    link = input("LINK (optional): ").strip()
    done_input = input("DONE (Y/N): ").strip().lower()
    entry = {
        "TYPE": [t.strip() for t in type_input.split(",") if t.strip()],
        "TAGS": [t.strip() for t in tags_input.split(",") if t.strip()],
        "DATE": holocene_today(),
        "DONE": done_input.startswith("y"),
        "DIID": next_diid(data)
    }
    if "|" in qote_input:
        entry["QOTE"] = [q.strip() for q in qote_input.split("|") if q.strip()]
    else:
        entry["QOTE"] = qote_input
    if link:
        entry["LINK"] = link
    data[title] = entry
    save_data(data)
    print(f"Added entry '{title}' with date {entry['DATE']}")

def push_changes():
    data = load_data()
    latest = max(data.items(), key=lambda kv: kv[1].get("DIID", -1))[1]
    date_str = latest.get("DATE", holocene_today())
    qote = latest.get("QOTE", "")
    if isinstance(qote, list):
        summary = " ".join(qote)
    else:
        summary = qote
    summary = summary.strip()
    if len(summary) > 50:
        summary = summary[:47] + "..."
    message = f"{date_str} - {summary}"
    subprocess.run(["git", "add", "-A"], check=True)
    try:
        subprocess.run(["git", "commit", "-m", message], check=True)
    except subprocess.CalledProcessError:
        print("Nothing to commit.")
    try:
        subprocess.run(["git", "push"], check=True)
    except subprocess.CalledProcessError:
        print("Git push failed. Configure a remote repository.")

def main():
    parser = argparse.ArgumentParser(description="Garden helper script")
    parser.add_argument("-n", "--new", action="store_true", help="create a new entry in data.json")
    parser.add_argument("-p", "--push", action="store_true", help="commit and push changes to git")
    args = parser.parse_args()
    if args.new:
        prompt_new_entry()
    if args.push:
        push_changes()
    if not (args.new or args.push):
        parser.print_help()

if __name__ == "__main__":
    main()
